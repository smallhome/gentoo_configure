#!/usr/bin/env ruby

require ENV['LKP_SRC'] + "/lib/statistics.rb"

kbps = []
throughput = []

def add_one_sample(kbps, throughput)
	return if kbps.empty?
	throughput << kbps.sum
	puts "# #{kbps.size} #{kbps.sum}"
	if kbps.size != 1 and (kbps.size & 1) != 0 and not $warned
		STDERR.puts "stats/vm-scalability: possibly disordered output #{ARGV[0]}"
		$warned = true
	end
end

while line = STDIN.gets
	case line
	when /^(\d+) bytes \/ (\d+) usecs = (\d+) KB.s/
		kbps << $3.to_i
	when /(\d+) bytes \([0-9.]+ .B\) copied, ([0-9.]+) s, ([0-9.]+) .B.s/
		kbps << ($1.to_i >> 10) / $2.to_f
	when /(\d+) bytes truncated in ([0-9.]+)-([0-9.]+) seconds/
		kbps << ($1.to_i >> 10) / ($2.to_f - $3.to_f)
	when /\d+ \* \d+ bytes migrated, \d+ usecs, (\d+) MB.s/
		puts 'migrate_mbps: ' + $1
	when /(\d+) bytes remapped, (\d+) usecs, (\d+) MB.s/
		kbps << $1.to_i / ($2.to_i >> 10)
	when /\.\/case-[a-z-]+/
		add_one_sample kbps, throughput
		kbps.clear
	end
end

add_one_sample kbps, throughput
exit if throughput.empty?

# Relative standard deviation
if throughput.size > 1
	stddev = throughput.standard_deviation / throughput.average
else
	stddev = kbps.standard_deviation * kbps.size / kbps.average
end

printf "throughput: %d\n", throughput.average
if kbps.empty?
	STDERR.puts "stats/vm-scalability: incomplete output"
	exit
end
printf "stddev:     %g\n", stddev
