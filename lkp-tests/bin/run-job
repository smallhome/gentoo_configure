#!/usr/bin/env ruby

# The job file is essentially grouped lists of commands to be executed with
# optional environment parameters.
#
# The commands are executed in order, thanks to ruby 1.9's ordered hash
# feature:
#   "the order that elements are yielded by each, each_key, each_value...
#   is defined to be the temporal order of insertion into the hash."

TMP = ENV['TMP'] || '/tmp'
LKP_SRC = ENV["LKP_SRC"] || File.dirname(File.dirname File.realpath $PROGRAM_NAME)

require 'yaml'
require 'pp'
require "#{LKP_SRC}/lib/job.rb"
require 'optparse'
require 'ostruct'

opts = OptionParser.new do |opts|
	opts.banner = "Usage: #{$PROGRAM_NAME} [options] job.yaml"

	opts.separator ''
	opts.separator 'options:'

	opts.on('--pid-file FILE', 'Save PID to FILE') do |file|
		File.open(file, 'w') { |f| f.write "#{$$}\n" }
	end

	opts.on('-s FILE', '--shell FILE', 'Create shell run script') do |file|
		$opt_shell = File.open(file, mode='w')
	end

	opts.on_tail('-h', '--help', 'Show this message') do
		puts opts
		exit
	end

end

if ARGV == []
	argv = ['-h']
else
	argv = ARGV
end
opts.parse!(argv)

$testcase = YAML.load_file(ARGV[0])
$top_env = expand_toplevel_vars Hash.new, $testcase

$job_params = $testcase['params'] || {}


def shell_run_head
	$opt_shell.puts "#!/bin/bash\n\n"
end

def update_global_env
	return unless File.exist? "#{TMP}/env.yaml"
	env = YAML.load_file "#{TMP}/env.yaml"
	env.each { |k, v|
		env[k] = expand_shell_var $top_env, v
	}
	$top_env.update(env)
end

def shell_export_env
	$top_env.each { |k, v|
		$opt_shell.puts "export #{k}=\"#{v}\""
	}
	$opt_shell.puts "\n\n"
end

def shell_define_read_env_vars
	$opt_shell.puts <<EOF
====================================() # read env vars
{
	eval $(sed -e '/^ *$/d;/^#/d;s/: */=\"/g;s/$/\"/g;s/ *=/=/g' $TMP/env.yaml)
}
EOF
end

def shell_call_read_env_vars(tabs='')
	$opt_shell.puts "#{tabs}====================================\n"
end

def shell_run_pre_test(program)
	return if $pre_test_executed
	return unless $programs[program].index("#{LKP_SRC}/tests/") == 0
	$pre_test_executed = true
	if $testcase['monitor_delay']
		$opt_shell.puts "($LKP_SRC/monitors/event/wait post-test --timeout $monitor_delay && $LKP_SRC/monitors/event/wakeup activate-monitor) &"
	else
		$opt_shell.puts "$LKP_SRC/monitors/event/wakeup activate-monitor"
	end
	$opt_shell.puts "sleep 1"
	$opt_shell.puts "date '+%s' > $TMP/start_time\n\n"
end

def add_one_env(program_env, k, v)
	if v.class == Array and v[0].class != Array and v[0].class != Hash
		v = v.join ' '
	end
	if v.class != Hash and v.class != Array
		program_env[k] = expand_shell_var $top_env, v
		return true
	end
	return false
end

def for_each(ah)
	if ah.class == Array
		ah.each { |a|
			for_each(a) { |k, v|
				yield k, v
			}
		}
	elsif ah.class == Hash
		ah.each { |k, v|
			yield k, v
		}
	else
		yield ah, nil
	end
end

def get_program_env(program, env)
	program_env = {}
	args = []

	if env == nil
		return program_env, args
	end

	# expand predefined parameter set name
	if env.class != Hash and env.class != Array
		if $job_params[env]
			env = $job_params[env]
		else
			param_yaml = LKP_SRC + '/params/' + program + '.yaml'
			if File.exist?(param_yaml)
				params = YAML.load_file(param_yaml)
				env = params[env] if params[env]
			end
		end
	end

	if env.class == String
		if env == 'disable'
			return program_env, args
		end
		args = env.split if env != ''
	elsif env.class == Fixnum or env.class == Float
		args = env.to_s
	else
		for_each(env) { |k, v|
			add_one_env program_env, k, v and next
			for_each(v) { |kk, vv|
				add_one_env program_env, kk, vv
			}
		}
	end

	return program_env, args
end

def create_cmd(program, args)
	wrapper = File.dirname($programs[program]) + '/wrapper'
	if File.executable?(wrapper)
		cmd = [ wrapper, program, *args ]
	else
		cmd = [ $programs[program], *args ]
	end

	if $programs[program] =~ %r{/tests/}
		cmd = [ "/usr/bin/time", "-v", "-o", "#{TMP}/#{program}.time", *cmd ]
	end

	return cmd
end

def shell_run_program(program, env, tabs='')
	program_env, args = get_program_env(program, env)
	return if program_env.empty? and args.empty? and File.exist?(LKP_SRC + '/setup/' + program)

	shell_run_pre_test(program)

	cmd = create_cmd(program, args)
	program_env.each { |k, v|
		$opt_shell.print "\t" if $shell_run_program_indent
		$opt_shell.puts "#{tabs}#{k}=\"#{v}\" \\"
	}
	$opt_shell.print "\t" if $shell_run_program_indent
	cmd_str = cmd.join' '
	cmd_str.gsub!(%r"#{LKP_SRC}", '$LKP_SRC')
	cmd_str.gsub!(%r"#{TMP}", '$TMP')
	$opt_shell.puts tabs + cmd_str
	if $programs[program].index("#{LKP_SRC}/setup/") == 0
		$opt_shell.print "\t" if $shell_run_program_indent
		shell_call_read_env_vars(tabs)
	end
end

def shell_run_one_shot
	$testcase.delete_if { |key, val|
		next unless $programs[key]
		next unless $programs[key].index("#{LKP_SRC}/monitors/one-shot/") == 0
		shell_run_program(key, val)
		true
	}
end

def shell_run_child(key, val, tabs = '')
	$opt_shell.puts "\n#{tabs}#{key}()\n#{tabs}{"
	val.delete_if { |k, v|
		next if $programs.include? k
		next if v.class == Hash
		$opt_shell.puts "\t#{tabs}export #{k}=\"#{v}\""
		true
	}
	val.delete_if { |k, v|
		next if $programs.include? k
		next if v.class != Hash
		shell_run_child(k, v, tabs + "\t")

		true
	}
	$shell_run_program_indent = true
	for_each_in(val, $programs) { |h, k, v|
		shell_run_program(k, v, tabs)
	}
	$shell_run_program_indent = false
	$opt_shell.puts "#{tabs}}\n\n"
	$opt_shell.puts "#{tabs}#{key} &\n\n"
end

def shell_wait_child()
	$opt_shell.puts "\nwait"
end

def run_child(key, val)
	val['testcase']  = $testcase['testcase']

	temp_yaml = "#{TMP}/lkp-run-job--#{key}--#{$$}.yaml"
	File.open(temp_yaml, mode='w') { |file|
		file.write(YAML.dump(val))
	}
	child_job_pwd = ENV['job_pwd']
	child_job_pwd += '/' unless child_job_pwd[-1] == '/'
	child_job_pwd += key
	Process.spawn($top_env.merge({'job_pwd' => child_job_pwd}),
		      "#{LKP_SRC}/bin/run-job #{temp_yaml}")
end


if $opt_shell
	create_programs_hash "{setup,monitors,tests,daemon}/**/*"
	shell_run_head
	update_global_env
	shell_export_env
	shell_define_read_env_vars
	shell_call_read_env_vars
	shell_run_one_shot
end

case $PROGRAM_NAME
when /run-job/
	$pre_test_executed = false
	create_programs_hash "{setup,monitors,tests,daemon}/**/*"
	ENV['job_pwd'] ||= '/'

	$testcase.delete_if { |key, val|
		next if $programs.include? key
		next if val.class != Hash

		if $opt_shell
			shell_run_child(key, val)
		else
			run_child(key, val)
		end

		# remove key and val to avoid re-run them in the end
		true
	}
when /job-env/
	create_programs_hash "{setup,monitors,tests,daemon}/**/*"
	$top_env.each { |key, val| puts "#{key}: #{val}" }
when /extract-stats/
	ARGV[1..-1].each { |f| $testcase.merge!(YAML.load_file(f)) }
	create_programs_hash "stats/**/*"
else
	STDERR.puts "Unknown program name."
	exit 1
end

def run_pre_test(program)
	return unless $pre_test_executed == false
	return unless $programs[program].index("#{LKP_SRC}/tests/") == 0
	$pre_test_executed = true

	puts "run: activate-monitor"
	return if ENV["LKP_DRYRUN"]

	if $testcase['monitor_delay']
		Process.spawn("#{LKP_SRC}/monitors/event/wait post-test --timeout #{$testcase['monitor_delay']} && #{LKP_SRC}/monitors/event/wakeup activate-monitor")
	else
		system "#{LKP_SRC}/monitors/event/wakeup", 'activate-monitor'
	end
	sleep 1
	%x[ date '+%s' > #{TMP}/start_time ]
end

def run_program(program, env)
	program_env, args = get_program_env(program, env)
	return if program_env.empty? and args.empty? and File.exist?(LKP_SRC + '/setup/' + program)

	if $PROGRAM_NAME =~ /job-env/
		program_env.each { |key, val| puts "#{program}.#{key}: #{val}" }
		return
	end

	run_pre_test program

	cmd = create_cmd(program, args)

	puts "run: " + cmd.join(" ") + "\t" + program_env.to_s
	return if ENV["LKP_DRYRUN"]

	program_env['all_program_env'] = YAML.dump(program_env)
	ret = system $top_env.merge(program_env), *cmd
	case ret
	when false
		File.open(ENV['RESULT_ROOT'] + '/last_state', 'a') { |f|
			if $?.exited?
				f.write "#{program}.exit_code.#{$?.exitstatus}: 1\n"
			else
				f.write "#{program}.kill_code.#{$?.to_i}: 1\n"
			end
			f.write "exit_fail: 1\n"
		}
		exit 1
	when nil
		File.open(ENV['RESULT_ROOT'] + '/last_state', 'a') { |f|
			f.write "#{program}.cannot_execute: 1\n"
		}
		exit 1
	end
end

if $opt_shell
	for_each_in($testcase, $programs) { |h, k, v|
		shell_run_program k, v
	}

	shell_wait_child

	$opt_shell.close
	exit
end

for_each_in($testcase, $programs) { |h, k, v|
	update_global_env
	run_program k, v
}

Process.waitall
