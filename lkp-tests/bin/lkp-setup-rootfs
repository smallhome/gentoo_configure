#!/bin/sh
### BEGIN INIT INFO
# Provides:          nfsroot
# Required-Start:    $all
# Required-Stop:
# Default-Start:     2 3 4 5
# Default-Stop:
# Short-Description: NFSROOT setup
# Description:       NFSROOT setup
### END INIT INFO

umask 002

. $LKP_SRC/lib/bootstrap.sh

# initiation at boot stage; should be invoked once for
# each fresh boot.
boot_init()
{
	mount_tmpfs
	redirect_stdout_stderr

	setup_hostname
	setup_hosts

	announce_bootup

	add_lkp_user

	fixup_packages

	setup_network
	run_ntpdate

	mount_debugfs
	mount_rootfs

	netconsole_init

	export PATH=$PATH:$LKP_SRC/bin
	echo   PATH=$PATH
}

boot_init

# when to not reboot is a policy issue, which can be refined later.
# here just serves as an example only.
job_does_not_need_reboot()
{
	grep -q "^do_not_reboot: 1$" $job && return 0

	local next_kernel
	next_kernel=$(awk '/^kernel: /{print $2}' $job | tr -d '"')
	grep -q "^do_not_reboot_for_same_kernel: 1$" $job && [ $kernel = $next_kernel ] && return 0

	return 1
}

start_reboot_watchdog()
{
	[ -n "$boot_timeout" ] || return
	[ -f /var/lock/bmc-watchdog ] && return

	bmc-watchdog --set --start-after-set -i $boot_timeout
}

while true; do
	echo $LKP_DEBUG_PREFIX $LKP_SRC/bin/run-lkp
	$LKP_DEBUG_PREFIX $LKP_SRC/bin/run-lkp $job

	tbox_cant_kexec && {
		echo "LKP: rebooting"
		echo "LKP: rebooting" > /dev/kmsg
		start_reboot_watchdog
		reboot 2>/dev/null && exit
	}

	if [ -n "$LKP_DEBUG" ]; then
		# To debug what left from last run
		set -x
		ps faux
		ls -l /tmp/
		ls -l /tmp/lkp
		lsmod
	fi

	next_job
	job_does_not_need_reboot || break
done

$LKP_SRC/bin/kexec-lkp ${pxe_user:-lkp} $NEXT_JOB
