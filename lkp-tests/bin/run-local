#!/usr/bin/env ruby

require 'optparse'
require 'ostruct'
require 'fileutils'

ENV["LKP_SRC"] ||= File.dirname File.dirname File.realpath $PROGRAM_NAME
LKP_SRC = ENV["LKP_SRC"] || File.dirname(File.dirname File.realpath $PROGRAM_NAME)
LKP_USER = ENV["USER"] || `whoami`.chomp

require "#{LKP_SRC}/lib/yaml.rb"
require "#{LKP_SRC}/lib/stats.rb"
require "#{LKP_SRC}/lib/matrix.rb"
require "#{LKP_SRC}/lib/job2sh.rb"
require "#{LKP_SRC}/lib/job.rb"

TMP = "/tmp/lkp-#{LKP_USER}"
ENV['TMP'] = TMP

ENV['PATH'] = ENV['PATH'] + ":#{LKP_SRC}/bin"
ENV['BENCHMARK_ROOT'] = '/lkp/benchmarks'

$opt_result_root = nil
$opt_set_key_value = {}

opts = OptionParser.new do |opts|
	opts.banner = 'Usage: run-local [--dry-run] [-o RESULT_ROOT] JOBFILE'

	opts.separator ''
	opts.separator 'options:'

	opts.on('-o RESULT_ROOT', '--output RESULT_ROOT', 'dir for storing all results') do |dir|
		FileUtils.rm_rf dir
		Dir.mkdir dir unless Dir.exist? dir
		ENV['RESULT_ROOT'] = $opt_result_root = File.realpath dir
	end

	opts.on("-s 'KEY: VALUE'", "--set 'KEY: VALUE'", "add YAML hash to job") do |key_value|
		$opt_set_key_value.merge!(YAML.load key_value)
	end

	opts.on_tail('-h', '--help', 'Show this message') do
		puts opts
		exit
	end
end

if ARGV == []
	argv = ['-h']
else
	argv = ARGV
end
opts.parse!(argv)

jobfile = ARGV[0]
unless jobfile
	puts "No jobfile specified"
	exit 1
end

def create_result_root(_result_root)
	0.upto(99) do |i|
		result_root = "#{_result_root}/#{i}"
		next if Dir.exist? result_root
		FileUtils.mkdir_p result_root, :mode => 02775
		return result_root
	end
	STDERR.puts "cannot create more result_roots under #{_result_root}"
	return nil
end

job = Job.new
job.load(jobfile) or (
	STDERR.puts "#{jobfile} is not a valid jobfile"
	exit 1
)

HOSTNAME = ENV["HOSTNAME"] || `hostname`.chomp
job['testbox'] = HOSTNAME
job['tbox_group'] = tbox_group(HOSTNAME)
job['kconfig'] ||= 'defconfig'
job['commit'] ||= `uname -r`.chomp!
job['rootfs'] ||= `grep -m1 ^ID= /etc/os-release`.split('=')[1].chomp
job['nr_cpu'] ||= '$(nproc)'
job['compiler'] ||= File.readlink('/usr/bin/gcc')

$opt_set_key_value.each { |k, v|
	job[k] = v
}

if $opt_result_root == nil
	_result_root = job._result_root
	result_root = create_result_root(_result_root) or exit
	ENV['RESULT_ROOT'] = result_root
else
	result_root = $opt_result_root
end

ENV['TMP_RESULT_ROOT'] = ENV['RESULT_ROOT']

FileUtils.rm_rf TMP
Dir.mkdir TMP

job_script = result_root + '/job.sh'
File.open(job_script, mode='w', perm=0755) do |file|
	job2sh(deepcopy(job.to_hash), file)
end

system job_script, 'run_job'
system LKP_SRC + '/bin/post-run'
system LKP_SRC + '/monitors/event/wakeup', 'job-finished'
system job_script, 'extract_stats'

job.save result_root + '/job.yaml'

stats = create_stats_matrix ENV['RESULT_ROOT']
if $opt_result_root == nil
	stats['stats_source'] = result_root + '/stats.json'
	unite_to(stats, _result_root)
	user = ENV['USER']
	save_paths(result_root, user)
	system(LKP_SRC + '/sbin/unite-params', result_root)
end
