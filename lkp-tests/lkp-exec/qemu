#!/bin/bash

. $LKP_SRC/lib/kexec.sh
. $LKP_SRC/lib/qemu.sh
. $LKP_SRC/lib/unit.sh
. $LKP_SRC/lib/job-init.sh

script_name=$(basename $0)

usage()
{
	cat <<EOF
Usage: lkp $script_name [-o RESULT_ROOT] [-p VDISK_PATH] [-s SSH_PORT] [-S] job.sh

options:
	-o  RESULT_ROOT		 	dir for storing all results
	-s  SSH_PORT		 	forward ssh port to host
	-p  VDISK_PATH			specify vdisk path
	-S				output boot message to stdio

Note:
This script uses qemu to start a VM to run LKP test-job.
It downloads kernel, initrd, bm_initrd, modules_initrd through LKP_SERVER,
and  generates lkp-initrd locally and creates job-initrd with 'job.sh'  you specified.

You can check test results in dir '/tmp/vm_test_result/' or a RESULT_ROOT you specified.
EOF
	exit 1
}

replace_script_partition_val()
{
	local disk_names=(/dev/vd{a..z})
	local job_script="$1"
	local nr_hdd_vdisk="$(echo $hdd_partitions | wc -w)"
	local nr_ssd_vdisk="$(echo $ssd_partitions | wc -w)"
	local nr_swap_vdisk="$(echo $swap_partitions | wc -w)"
	local nr_rootfs_vdisk="$(echo $rootfs_partition | wc -w)"

	[[ $nr_hdd_partitions ]] || nr_hdd_partitions=$nr_hdd_vdisk
	[[ $nr_ssd_partitions ]] || nr_ssd_partitions=$nr_ssd_vdisk

	VDISK_NUM=$((nr_hdd_partitions+nr_ssd_partitions+nr_swap_vdisk+nr_rootfs_vdisk))

	[[ "$hdd_partitions$ssd_partitions$swap_partitions$rootfs_partition" =~ '/dev/vda' ]] && return

	if ((VDISK_NUM)); then
		local index=0
		local vdisk_hdd_val="${disk_names[@]:$index:$nr_hdd_partitions}"
		index=$((index+nr_hdd_partitions))
		local vdisk_ssd_val="${disk_names[@]:$index:$nr_ssd_partitions}"
		index=$((index+nr_ssd_partitions))
		local vdisk_rootfs_val="${disk_names[@]:$index:$nr_rootfs_vdisk}"
		index=$((index+nr_rootfs_vdisk))
		local vdisk_swap_val="${disk_names[@]:$index:$nr_swap_vdisk}"

		sed -i	-e "s%export hdd_partitions=.*%export hdd_partitions='${vdisk_hdd_val}'%" \
			-e "s%export ssd_partitions=.*%export ssd_partitions='${vdisk_ssd_val}'%" \
			-e "s%export swap_partitions=.*%export swap_partitions='${vdisk_swap_val}'%" \
			-e "s%export rootfs_partition=.*%export rootfs_partition='${vdisk_rootfs_val}'%" \
			$job_script
	fi
}

create_job_initrd()
{
	mkdir -p /tmp$job_initrd_dir
	cp $job_script /tmp${job_file%.yaml}.sh
	archive=/tmp${job_file%.yaml}
	(cd /tmp && find lkp | cpio -o -H newc -F $archive.cpio
	 gzip -n -9 $archive.cpio
	 mv -f $archive.cpio.gz $archive.cgz)
}

get_qemu_kernel_initrd()
{
	local lkp_initrd=
	local job_initrd=
	download_kernel_initrd $1 $2

	initrd_option="-initrd $concatenate_initrd"
}

# limit $1 to MemAvailable/2
max_sane_qemu_memory()
{
	local mem_kb="$(to_kb $1)"

	export_meminfo

	(( mem_kb > MemAvailable / 2 )) && mem_kb=$((MemAvailable / 2))

	echo $((mem_kb >> 10))M
}

setup_vdisk_root()
{
	vm_name=$testbox
	
	if [[ "$opt_vdiskpath" ]]; then
		[[ -d "$opt_vdiskpath" ]] || {
			echo "$opt_vdiskpath: no such directory"
			exit 1
		}
		VDISK_ROOT="$opt_vdiskpath"
	else
		VDISK_ROOT=/tmp/vdisk-$USER
		[[ -d $VDISK_ROOT ]] || mkdir -p $VDISK_ROOT
	fi
}

while getopts "o:p:s:S" opt
do
	case $opt in
		o ) opt_result_root="$OPTARG" ;;
		s ) opt_ssh="$OPTARG" ;;
		p ) opt_vdiskpath="$OPTARG" ;;
		S ) unset DISPLAY ;;
		? ) usage ;;
	esac
done

shift $(($OPTIND-1))

job_script=$1

[ -n "$job_script" ] || usage
. $job_script
export_top_env
replace_script_partition_val $job_script

# create lkp-$arch.cgz
export LKP_USER=$user
if [[ "$kconfig" =~ ^(i386|x86_64)- ]]; then
	arch=${kconfig%%-*}
else
	arch=$(arch)
fi

srcpath=$(dirname $(dirname $(readlink -e -v $0)))
$LKP_SRC/sbin/pack -a $arch lkp-src
lkp_initrd=/tmp/lkp_initrd-$USER/lkp/$LKP_USER/lkp-$arch.cgz

# create job_initrd.cgz
job_initrd=/tmp${job_file%.yaml}.cgz
job_initrd_dir=${job_file%/*}
create_job_initrd

# if job.sh not include bootloader_append entry, add default content
if [ -n "$bootloader_append" ]; then
	bootloader_append=$(echo "$bootloader_append" | tr '\n' ' ')
else
	bootloader_append="root=/dev/ram0 job=$job_file user=$user  ARCH=x86_64 kconfig=x86_64-rhel commit=051d101ddcd268a7429d6892c089c1c0858df20b branch=linux-devel/devel-hourly-2015033109 max_uptime=1247 RESULT_ROOT=$result_root earlyprintk=ttyS0,115200 rd.udev.log-priority=err systemd.log_target=journal systemd.log_level=warning debug apic=debug sysrq_always_enabled rcupdate.rcu_cpu_stall_timeout=100 panic=-1 softlockup_panic=1 nmi_watchdog=panic oops=panic load_ramdisk=2 prompt_ramdisk=0 console=ttyS0,115200 console=tty0 vga=normal rw"
fi

# create vm result path
if [ -z $opt_result_root ]; then
	vm_result_path="/tmp/vm_test_result/$testcase-$(date '+%F-%T')"
else
	vm_result_path=$opt_result_root
fi
mkdir -p $vm_result_path

# download kernel and initrds, then cat them
LKP_SERVER=bee.sh.intel.com
CACHE_DIR=/tmp/lkp-qemu-downloads
[ -d $CACHE_DIR ] || mkdir $CACHE_DIR
LKP_USER="lkp"

run_kvm()
{
	trap - EXIT

	local mem_mb="$(max_sane_qemu_memory $memory)"
	local mount_tag=9p/virtfs_mount
	model='qemu-system-x86_64 -enable-kvm'
	netdev_option="-device e1000,netdev=net0 "
	netdev_option+="-netdev user,id=net0"
	KVM_COMMAND=(
		$model
		-fsdev local,id=test_dev,path=$vm_result_path,security_model=none -device virtio-9p-pci,fsdev=test_dev,mount_tag=$mount_tag
		-kernel $kernel_file
		-append "$bootloader_append ip=dhcp result_service=$mount_tag"
		$initrd_option
		-smp $nr_cpu
		-m $mem_mb
		-no-reboot
		-watchdog i6300esb
		-rtc base=localtime
		$qemu_netdev_option
		$qemu_console_option
		$QEMU_DRIVE_OPTION
	)
	echo "exec command: ${KVM_COMMAND[@]}"
	"${KVM_COMMAND[@]}"
}

get_qemu_kernel_initrd $lkp_initrd $job_initrd
setup_qemu_console
setup_qemu_netdev
setup_vdisk_root
setup_qemu_drives
run_kvm
