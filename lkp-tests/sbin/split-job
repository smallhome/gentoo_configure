#!/usr/bin/env ruby

LKP_SRC = ENV["LKP_SRC"] || File.dirname(File.dirname File.realpath $PROGRAM_NAME)

require "#{LKP_SRC}/lib/job.rb"
require 'optparse'
require 'ostruct'

$opt_output_path = '.'
$opt_set_key_value = {}

opts = OptionParser.new do |opts|
	opts.banner = "Usage: split-job [options] jobs..."

	opts.separator ""
	opts.separator "options:"

	opts.on("-o PATH", "--output PATH", "output path") do |path|
		if File.directory? path
			$opt_output_path = path
		else
			STDERR.puts "#{path}: no such directory"
			exit
		end
	end

	opts.on("-c CONFIG", "--config CONFIG", "test kernel config") do |kconfig|
		$opt_kconfig = kconfig
	end

	opts.on("-k COMMIT", "--kernel COMMIT", "test kernel commit") do |commit|
		$opt_commit = commit
	end

	opts.on("-t HOSTNAME", "--test-box HOSTNAME", "test box") do |testbox|
		$opt_testbox = testbox
	end

	opts.on("-s 'KEY: VALUE'", "--set 'KEY: VALUE'", "add YAML hash to job") do |key_value|
		$opt_set_key_value.merge!(YAML.load key_value)
	end

	opts.on("--any", "save one single random atom job") do
		$opt_any = true
	end

	opts.on("--no-defaults", "do not load the defaults headers") do
		$opt_no_defaults = true
	end

	opts.on_tail("-h", "--help", "show this message") do
		puts opts
		exit
	end
end

opts.parse!(ARGV)

if ARGV.size == 0
	puts opts
	exit
end

$opt_testbox ||= `hostname`.chomp
$atom_jobs = []

ARGV.each { |jobfile|
	jobs = Job.new
	jobs.load(jobfile) or next
	unless $opt_no_defaults
		jobs.load_head("#{LKP_SRC}/hosts/#{$opt_testbox}", true)
		jobs.load_head("#{LKP_SRC}/jobs/DEFAULTS-#{jobs['category']}", true)
	end
	$opt_set_key_value.each { |k, v| jobs[k] = v }
	jobs['kconfig'] = $opt_kconfig if $opt_kconfig
	jobs['commit'] = $opt_commit if $opt_commit
	jobs['enqueue_time'] = Time.now
	jobs['node_roles'] = 'server client' if jobs['cluster']
	prefix = $opt_output_path + '/' + File.basename(jobfile, '.yaml')
	jobs.each_jobs { |job|
		unit_jobfile = prefix + '-' + job.path_params
		unit_jobfile += '-' + job['commit'] if job['commit']
		unit_jobfile += '-' + rootfs_filename(job['rootfs']) if job['rootfs']
		unit_jobfile += '.yaml'
		if $opt_any
			$atom_jobs << [jobfile, unit_jobfile, deepcopy(job)]
		else
			job.save unit_jobfile
			puts "#{jobfile} => #{unit_jobfile}"
		end
	}
}

if $opt_any
	i = rand($atom_jobs.size)
	job = $atom_jobs[i]
	job[2].save job[1]
	puts "#{job[0]} => #{job[1]}"
end
