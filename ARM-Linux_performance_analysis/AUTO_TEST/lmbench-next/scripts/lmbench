#!/bin/sh

# lmbench - run the lmbench benchmark suite.
#
# Hacked by Larry McVoy (lm@sun.com, lm@sgi.com, lm@bitmover.com).
# Copyright (c) 1994 Larry McVoy.  GPLed software.
#
# Updated by Jan Glauber (jan.glauber@gmail.com)
# Copyright 2014 Harman Becker Automotive GmbH
#

# Get path to ourselve
SCRIPT=$PWD
SCRIPTPATH="`dirname $0`"

# Make sure we can find lmbench-commands, df, netstat, ifconfig
PATH=.:${SCRIPTPATH}:${PATH}:/sbin:/usr/sbin
export PATH

OUTPUT="/dev/tty"

if [ -e "$1" ]
then
	. $1
	echo "[Using config in $1]" >> ${OUTPUT}
else
	echo "[Using defaults]" >> ${OUTPUT}
	ENOUGH=1000000
	TIMING_O=0
	LOOP_O=0
	LINE_SIZE=256
	WARMUPS=0
	REPETITIONS=1
	BENCHMARK_ALL="YES"
fi
export ENOUGH TIMING_O LOOP_O LINE_SIZE LMBENCH_SCHED WARMUPS REPETITIONS REALTIME

if [ X$BENCHMARK_ALL = XYES ]
then
	BENCHMARK_SYSCALL="YES"
	BENCHMARK_OPS="YES"
	BENCHMARK_SELECT="YES"
	BENCHMARK_SIG="YES"
	BENCHMARK_PIPE="YES"
	BENCHMARK_UNIX="YES"
	BENCHMARK_PROC="YES"
	BENCHMARK_PAGEFAULT="YES"
	BENCHMARK_MMAP="YES"
	BENCHMARK_FILE="YES"
	BENCHMARK_UDP="YES"
	BENCHMARK_TCP="YES"
	BENCHMARK_CONNECT="YES"
	BENCHMARK_BCOPY="YES"
	BENCHMARK_CTX="YES"
	BENCHMARK_MEM="YES"
fi

if [ X$FILE = X ]
then
	FILE=/tmp/XXX
	touch $FILE || echo Cannot create $FILE >> ${OUTPUT}
fi

if [ X$MB = X ]
then
	MB=8
fi
AVAILKB=`expr $MB \* 1024`

# Create test file if needed
if [ ! -f $FILE ]
then
	`dd if=/dev/zero of=$FILE bs=1M count=$MB >& /dev/null`
fi

# Figure out how big we can go for stuff that wants to use
# all and half of memory.
HALF="512 1k 2k 4k 8k 16k 32k 64k 128k 256k 512k 1m"
ALL="$HALF 2m"
i=4
while [ $i -le $MB ]
do
	ALL="$ALL ${i}m"
	h=`expr $i / 2`
	HALF="$HALF ${h}m"
	i=`expr $i \* 2`
done

if [ X$FSDIR = X ]
then
	FSDIR=/tmp/lat_fs
fi

# Figure out as much stuff as we can about this system.
# Sure would be nice if everyone had SGI's "hinv".
echo \[lmbench results for `uname -a`] 1>&2
echo \[LMBENCH_VERSION: `grep LMBENCH "$SCRIPTPATH"/version | cut -f 2 -d ":"`] 1>&2
echo \[ALL: ${ALL}] 1>&2
echo \[WARMUPS: ${WARMUPS}] 1>&2
echo \[REPETITIONS: ${REPETITIONS}] 1>&2
echo \[DISKS: ${DISKS}] 1>&2
echo \[DISK_DESC: ${DISK_DESC}] 1>&2
echo \[ENOUGH: ${ENOUGH}] 1>&2
echo \[FAST: ${FAST}] 1>&2
echo \[FASTMEM: ${FASTMEM}] 1>&2
echo \[FILE: ${FILE}] 1>&2
echo \[FSDIR: ${FSDIR}] 1>&2
echo \[HALF: ${HALF}] 1>&2
echo \[INFO: ${INFO}] 1>&2
echo \[LINE_SIZE: ${LINE_SIZE}] 1>&2
echo \[LOOP_O: ${LOOP_O}] 1>&2
echo \[MB: ${MB}] 1>&2
echo \[MHZ: ${MHZ}] 1>&2
echo \[MOTHERBOARD: ${MOTHERBOARD}] 1>&2
echo \[NETWORKS: ${NETWORKS}] 1>&2
echo \[PROCESSORS: ${PROCESSORS}] 1>&2
echo \[OS: ${OS}] 1>&2
echo \[LMBENCH_SCHED: $LMBENCH_SCHED] 1>&2
echo \[REALTIME: $REALTIME] 1>&2
echo \[TIMING_O: ${TIMING_O}] 1>&2
echo \[USER: $USER] 1>&2
echo \[HOSTNAME: `hostname`] 1>&2
echo \[NODENAME: `uname -n`] 1>&2
echo \[SYSNAME: `uname -s`] 1>&2
echo \[PROCESSOR: `uname -p`] 1>&2
echo \[MACHINE: `uname -m`] 1>&2
echo \[RELEASE: `uname -r`] 1>&2
echo \[VERSION: `uname -v`] 1>&2
echo \[COMPILER: `grep COMPILER "$SCRIPTPATH"/version | cut -f 2 -d ":"`] 1>&2
echo \[CFLAGS: `grep CFLAGS "$SCRIPTPATH"/version | cut -f 2 -d ":"`] 1>&2

echo \[`date`] 1>&2
echo \[`uptime`] 1>&2

ifconfig | while read i
do
	echo \[ifconfig: "$i"] 1>&2
done

mount | while read i
do
	echo \[mount: "$i"] 1>&2
done

STAT=$FSDIR/lmbench
mkdir -p $FSDIR 2>/dev/null
touch $STAT 2>/dev/null
if [ ! -f $STAT ]
then
	echo "Can't make a file - $STAT - in $FSDIR" >> ${OUTPUT}
	exit 1
fi

if [ X$SYNC != X ]
then
	/bin/rm -rf $SYNC
	mkdir -p $SYNC 2>/dev/null
	if [ ! -d $SYNC ]
	then
		echo "Can't make $SYNC" >> ${OUTPUT}
		exit 1
	fi
fi

# To elevate to SCHED_RR we need to deal with cgroups
if [ X$REALTIME = XYES ]
then
	CGROUPS=`grep '^cgroup' /proc/mounts`
	if [ -n "$CGROUPS" ]
	then
		echo $$ > /sys/fs/cgroup/cpu/tasks
	fi
fi

#
# B E N C H M A R K S
#

# didn't check for *every* option just for this echo...
if [ X$BENCHMARK_SYSCALL = XYES  ]
then
	echo "Calculating latency measurements" >> ${OUTPUT}
	echo "" 1>&2
	echo "Latency measurements" 1>&2
fi

if [ X$BENCHMARK_SYSCALL = XYES ]
then
	lat_syscall -W $WARMUPS -N $REPETITIONS getppid		# former "null"
	lat_syscall -W $WARMUPS -N $REPETITIONS gettimeofday
	lat_syscall -W $WARMUPS -N $REPETITIONS read
	lat_syscall -W $WARMUPS -N $REPETITIONS write
	lat_syscall -W $WARMUPS -N $REPETITIONS stat $STAT
	lat_syscall -W $WARMUPS -N $REPETITIONS fstat $STAT
	lat_syscall -W $WARMUPS -N $REPETITIONS open $STAT
fi

if [ X$BENCHMARK_SELECT = XYES ]
then
	for i in 10 100 250 500
	do
		lat_select -W $WARMUPS -N $REPETITIONS -n $i file
	done
	for i in 10 100 250 500
	do
		lat_select -W $WARMUPS -N $REPETITIONS -n $i tcp
	done
fi

if [ X$BENCHMARK_SIG = XYES ]
then
	lat_sig -W $WARMUPS -N $REPETITIONS install
	lat_sig -W $WARMUPS -N $REPETITIONS catch
	lat_sig -W $WARMUPS -N $REPETITIONS prot $FILE
fi

if [ X$BENCHMARK_PIPE = XYES ]
then
	lat_pipe -W $WARMUPS -N $REPETITIONS
fi

if [ X$BENCHMARK_UNIX = XYES ]
then
	lat_unix -W $WARMUPS -N $REPETITIONS
fi

if [ X$BENCHMARK_PROC = XYES ]
then
	cp $SCRIPTPATH/hello /tmp/hello
	for i in fork exec shell
	do
		lat_proc -W $WARMUPS -N $REPETITIONS $i
	done
	rm -f /tmp/hello 
fi

if [ X$BENCHMARK_OPS = XYES ]
then
	lat_ops -W $WARMUPS -N $REPETITIONS
	par_ops -W $WARMUPS -N $REPETITIONS
fi

rm -f $FILE

if [ X$BENCHMARK_FILE = XYES ]
then
	# choose one sample bandwidth from the middle of the pack
	lmdd label="File $FILE write bandwidth: " of=$FILE move=${MB}m fsync=1 print=3
	rm -f $FILE.*
fi

if [ X$BENCHMARK_PAGEFAULT = XYES ]
then
	lat_pagefault -W $WARMUPS -N $REPETITIONS $FILE
fi

if [ X$BENCHMARK_MMAP = XYES ]
then
	echo "" 1>&2
	echo "mappings" 1>&2
	for i in $ALL
	do
		lat_mmap -W $WARMUPS -N $REPETITIONS $i $FILE
	done
	echo "" 1>&2
fi

if [ X$BENCHMARK_FILE = XYES ]
then
	echo "Calculating file system latency" >> $OUTPUT
	echo "File system latency" 1>&2
	lat_fs -W $WARMUPS -N $REPETITIONS $FSDIR
	echo "" 1>&2
fi

if [ X"$DISKS" != X ]
then
	for i in $DISKS
	do
		if [ -r $i ]
		then
			echo "Calculating disk zone bw & seek times" >> ${OUTPUT}
			disk $i
			echo "" 1>&2
		fi
	done
fi

if [ X$BENCHMARK_TCP = XYES -o X$BENCHMARK_UDP = XYES -o X$BENCHMARK_CONNECT = XYES ]
then
	echo "Calculating local networking" >> ${OUTPUT}
	echo "Local networking" 1>&2

	SERVERS="lat_udp lat_tcp lat_connect bw_tcp"
	for server in $SERVERS
	do
		$server -s
	done
fi

if [ X$BENCHMARK_UDP = XYES ]
then
	lat_udp -W $WARMUPS -N $REPETITIONS localhost
	lat_udp -S localhost
fi

if [ X$BENCHMARK_TCP = XYES ]
then
	lat_tcp -W $WARMUPS -N $REPETITIONS localhost
	lat_tcp -S localhost
fi

if [ X$BENCHMARK_CONNECT = XYES ]
then
	lat_connect -W $WARMUPS -N $REPETITIONS localhost
	lat_connect -S localhost
fi

if [ X$BENCHMARK_TCP = XYES ]
then
	echo "" 1>&2
	echo "Socket bandwidth using localhost" 1>&2
	for m in 1 64 128 256 512 1024 1437 10M; do
		bw_tcp -W $WARMUPS -N $REPETITIONS -m $m localhost;
	done
	bw_tcp -S localhost
	echo "" 1>&2
fi

if [ X$BENCHMARK_UNIX = XYES -o X$BENCHMARK_FILE = XYES -o X$BENCHMARK_PIPE = XYES -o X$BENCHMARK_MMAP = XYES ]
then
	echo "Calculating bandwidth measurements" >> ${OUTPUT}
	echo "Bandwidth measurements" 1>&2
fi

if [ X$BENCHMARK_UNIX = XYES ]
then
	bw_unix -W $WARMUPS -N $REPETITIONS
fi

if [ X$BENCHMARK_PIPE = XYES ]
then
	bw_pipe -W $WARMUPS -N $REPETITIONS
fi

if [ X$BENCHMARK_FILE = XYES ]
then
	echo "" 1>&2
	echo "read bandwidth" 1>&2
	for i in $ALL
	do
		bw_file_rd -W $WARMUPS -N $REPETITIONS $i io_only $FILE
	done
	echo "" 1>&2
	
	echo "read open2close bandwidth" 1>&2
	for i in $ALL
	do
		bw_file_rd -W $WARMUPS -N $REPETITIONS $i open2close $FILE
	done
	echo "" 1>&2
fi	

if [ X$BENCHMARK_MMAP = XYES ]
then
	echo "" 1>&2
	echo "Mmap read bandwidth" 1>&2
	for i in $ALL
	do
		bw_mmap_rd -W $WARMUPS -N $REPETITIONS $i mmap_only $FILE
	done
	echo "" 1>&2

	echo "Mmap read open2close bandwidth" 1>&2
	for i in $ALL
	do
		bw_mmap_rd -W $WARMUPS -N $REPETITIONS $i open2close $FILE
	done
	echo "" 1>&2
	rm -f $FILE
fi

if [ X$BENCHMARK_BCOPY = XYES ]
then
	echo "" 1>&2
	echo "libc bcopy unaligned" 1>&2
	for i in $HALF
	do
		bw_mem -W $WARMUPS -N $REPETITIONS $i bcopy
	done
	echo "" 1>&2

	echo "libc bcopy aligned" 1>&2
	for i in $HALF
	do
		bw_mem -W $WARMUPS -N $REPETITIONS $i bcopy conflict
	done
	echo "" 1>&2

	echo "Memory bzero bandwidth" 1>&2
	for i in $ALL
	do
		bw_mem -W $WARMUPS -N $REPETITIONS $i bzero
	done
	echo "" 1>&2

	echo "unrolled bcopy unaligned" 1>&2
	for i in $HALF
	do
		bw_mem -W $WARMUPS -N $REPETITIONS $i fcp
	done
	echo "" 1>&2

	echo "unrolled partial bcopy unaligned" 1>&2
	for i in $HALF
	do
		bw_mem -W $WARMUPS -N $REPETITIONS $i cp
	done
	echo "" 1>&2

	echo "Memory read bandwidth" 1>&2
	for i in $ALL
	do
		bw_mem -W $WARMUPS -N $REPETITIONS $i frd
	done
	echo "" 1>&2

	echo "Memory partial read bandwidth" 1>&2
	for i in $ALL
	do
		bw_mem -W $WARMUPS -N $REPETITIONS $i rd
	done
	echo "" 1>&2

	echo "Memory write bandwidth" 1>&2
	for i in $ALL
	do
		bw_mem -W $WARMUPS -N $REPETITIONS $i fwr
	done
	echo "" 1>&2

	echo "Memory partial write bandwidth" 1>&2
	for i in $ALL
	do
		bw_mem -W $WARMUPS -N $REPETITIONS $i wr
	done
	echo "" 1>&2

	echo "Memory partial read/write bandwidth" 1>&2
	for i in $ALL
	do
		bw_mem -W $WARMUPS -N $REPETITIONS $i rdwr
	done
	echo "" 1>&2
fi

if [ X$BENCHMARK_CTX = XYES ]
then
	echo Calculating context switch overhead >> ${OUTPUT}
	echo Context switch overhead 1>&2
	if [ $MB -ge 8 ]
	then
		CTX="0 4 8 16 32 64"
		N="2 4 8 16 24 32 64 96"
	else
		CTX="0 4 8 16 32"
		N="2 4 8 16 24 32 64 96"
	fi
	
	for size in $CTX
	do	
		lat_ctx -W $WARMUPS -N $REPETITIONS -s $size $N
	done
	echo "" 1>&2
fi

if [ X$BENCHMARK_MEM = XYES ]
then
	echo Calculating effective TLB size >> ${OUTPUT}
	echo Effective TLB size 1>&2
	if [ X$LINE_SIZE = X ]
	then
		tlb -M ${MB}M >> ${OUTPUT}
	else 
		tlb -L $LINE_SIZE -M ${MB}M >> ${OUTPUT}
	fi
	echo "" 1>&2

	echo Calculating memory load parallelism >> ${OUTPUT}
	echo "Memory load parallelism" 1>&2
	if [ X$LINE_SIZE = X ]
	then
		par_mem -M ${MB}M
	else
		par_mem -L $LINE_SIZE -M ${MB}M
	fi
	echo "" 1>&2

	echo Calculating McCalpin\'s STREAM benchmark >> ${OUTPUT}
	echo McCalpin\'s STREAM benchmark 1>&2
	stream -M ${MB}M
	stream -v 2 -M ${MB}M
	echo "" 1>&2

	echo Calculating memory load latency >> ${OUTPUT}
	echo "Memory load latency" 1>&2
	if [ X$FASTMEM = XYES ]
	then
		lat_mem_rd -W $WARMUPS -N $REPETITIONS $MB 128
	else
		lat_mem_rd -W $WARMUPS -N $REPETITIONS $MB 16 32 64 128 256 512 1024 
	fi
	echo "" 1>&2

	echo "Calculating random load latency" >> ${OUTPUT}
	echo "Random load latency" 1>&2
	lat_mem_rd -W $WARMUPS -N $REPETITIONS -t $MB 16
	echo "" 1>&2
fi

echo '' 1>&2
echo \[`date`] 1>&2

exit 0
